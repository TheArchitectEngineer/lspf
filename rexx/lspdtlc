/*
  Copyright (c) 2020 Daniel John Erdos

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

*/

/* ******************************************************** */
/* Simple DTL parser for keylists and command tables with   */
/* very little error checking.                              */
/*                                                          */
/* Tags must be on one line.                                */
/*                                                          */
/* Keylist output is a SHARED keylist, applid+KEYS          */
/* Command table output is applid+"CMDS"                    */
/* ******************************************************** */

address ISPEXEC

Call setupGlobals

do forever
   "DISPLAY PANEL(LSPDTL01)"
   if RC = 8 then leave
   "ADDPOP ROW(5) COLUMN(5)"
   "DISPLAY PANEL(LSPDTL02)"
   if RC > 0 then do ; "REMPOP" ; iterate ; end
   "REMPOP"
   g.outd    = zdtltabl
   g.tabrepl = ( ztabrepl = "/" )
   g.kappl   = zkeyappl
   zfile     = .stream~new( zdtlkey1 )
   zfile~open( "read" )
   do while zfile~lines > 0
      call parseDTLline zfile~linein
   end
   zfile~close
   Call resetGlobals
end
EXIT


setupGlobals: Procedure expose g. KEYL. KEYI.
g.                = ""
g.Tagss           = "KEYL KEYI !DOCTYPE :DOCTYPE CMDTBL CMD CMDACT"
g.Tagse           = "/KEYL /CMDTBL"
g.fn_Tags.1       = "KEYL_start"
g.fn_Tags.2       = "KEYI_start"
g.fn_Tags.3       = "!DOCTYPE_start"
g.fn_Tags.4       = "!DOCTYPE_start"
g.fn_Tags.5       = "CMDTBL_start"
g.fn_Tags.6       = "CMD_start"
g.fn_Tags.7       = "CMDACT_start"
g.fn_Tage.1       = "KEYL_end"
g.fn_Tage.2       = "CMDTBL_end"
g.KEYL_tags       = "KEYI"
g.CMDTBL_Tags     = "CMD"
g.CMD_Tags        = "CMDACT"
g.open_comment    = "!-- :--"
g.!DOCTYPE        = "DM"
g.!DOCTYPE.DM     = "SYSTEM"
g.!DOCTYPE.SYSTEM = ""
g.!DOCTYPE.start  = .false
g.KEYL.start      = .false
g.CMDTBL.start    = .false
g.CMD.start       = .false
g.valid.key       = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24"
g.valid.atr       = "NO YES LONG SHORT"
g.decl.gtsym      = ">"
g.decl.ltsym      = "<"
g.decl.colon      = ":"
g.decl.amp        = "&"
g.decl.semi       = ";"
g.decl.period     = "."
g.decl.quote      = "'"
g.decl.dquote     = '"'
g.decl.ndash      = "-"
g.decl.us         = "_"
g.decl.or         = "|"
g.decl.sll        = "\"
g.decl.lbrk       = "["
g.decl.rbrk       = "]"
g.decl.lbrc       = "{"
g.decl.rbrc       = "}"
g.decl.minus      = "-"
g.decl.plus       = "+"
g.decl.eqsym      = "="
g.decl.percent    = "%"
g.decl.dot        = "."
g.tabrepl         = .false
g.errors          = .false
g.outd            = ""
g.kappl           = ""
g.yctverb.0       = 0
KEYI.             = ""
KEYL.             = ""
ZCT.              = ""
CMDTBL.           = ""
CMD.              = ""
CMDACT.           = ""
parse source . . g.thisexec .
p = lastpos( "/", g.thisexec )
if ( p > 0 ) then
  do
    g.thisexec = substr( g.thisexec, p+1 )
  end
"VGET ZSCREENW SHARED"
g.screenw = zscreenw
RETURN


resetGlobals: Procedure expose g. KEYL. KEYI.
KEYI.             = ""
KEYL.             = ""
ZCT.              = ""
CMDTBL.           = ""
CMD.              = ""
CMDACT.           = ""
g.KEYL.start      = .false
g.CMDTBL.start    = .false
g.errors          = .false
g.yctverb.0       = 0
RETURN


parseDTLline: Procedure expose g. KEYL. KEYI. CMDTBL. CMD. CMDACT.
parse arg dtlline

if dtlline = "" then RETURN

parse var dtlline head "<" token ">" chars
if head \= "" then Call dtlerror "Invalid data found before < on tag."

tkn1 = upper( word( token, 1 ) )
if pos( tkn1, g.open_comment ) > 0 then RETURN

p = wordpos( tkn1, g.Tagse )
if p > 0 then
  do
    Interpret "Call " g.fn_Tage.p
  end
else
  do
    p = wordpos( tkn1, g.Tagss )
    if p > 0 then
      do
        Interpret "Call " g.fn_Tags.p
      end
    else
      do
        Call dtlerror "Invalid tag.  Supported tags: "g.Tagss
      end
  end
RETURN


!DOCTYPE_start: Procedure expose g. token
-- <!DOCTYPE DM SYSTEM>
Call checkOpenTags !DOCTYPE

if words( token ) > 3 | ,
   upper( word( token, 2 ) ) \= "DM" | ,
   upper( word( token, 3 ) ) \= "SYSTEM" then
  do
    Call dtlerror "Invalid DOCTYPE tag found.  Must be DOCTYPE DM SYSTEM"
  end
g.!DOCTYPE.start = true
RETURN


KEYL_start: Procedure expose g. KEYL. KEYI. token
-- <KEYL applid= name= help=>
Call checkOpenTags KEYL

parse caseless var token head "applid=" applidx " " tail
KEYL.applid = upper( applidx )
if KEYL.applid = "" then
  do
    if g.kappl = "" then
      do
        Call dtlerror "No applid= found on KEYL tag and no defult APPLID has been entered."
      end
    KEYL.applid = g.kappl
  end
Call checkName KEYL.applid, "applid", 4

token = head||tail
parse caseless var token head "name=" namex " " tail
KEYL.name = upper( namex )
Call checkName KEYL.name, "name", 8

token = head||tail
parse caseless var token head "help=" helpx " " tail
KEYL.help = upper( helpx )
if helpx \= "" then
  do
    Call checkName KEYL.help, "help", 8
  end

if upper( head||tail ) \= "KEYL" then
  do
    Call dtlerror "Invalid data found in the KEYL tag."
  end
g.KEYL.start = .true
RETURN


KEYL_end: Procedure expose g. KEYL. KEYI.
-- write out the keylist --
Call checkEndTags KEYL

outfile = g.outd
tabName = KEYL.applid||"KEYS"

if g.errors then
  do
    Call dtlerror "Keylist "KEYL.name" not written to "tabName" due to errors."
    Call resetGlobals
    RETURN
  end

key   = "KEYLISTN"
names = "KEY1DEF  KEY1ATR  KEY1LAB ",
        "KEY2DEF  KEY2ATR  KEY2LAB ",
        "KEY3DEF  KEY3ATR  KEY3LAB ",
        "KEY4DEF  KEY4ATR  KEY4LAB ",
        "KEY5DEF  KEY5ATR  KEY5LAB ",
        "KEY6DEF  KEY6ATR  KEY6LAB ",
        "KEY7DEF  KEY7ATR  KEY7LAB ",
        "KEY8DEF  KEY8ATR  KEY8LAB ",
        "KEY9DEF  KEY9ATR  KEY9LAB ",
        "KEY10DEF KEY10ATR KEY10LAB ",
        "KEY11DEF KEY11ATR KEY11LAB ",
        "KEY12DEF KEY12ATR KEY12LAB ",
        "KEY13DEF KEY13ATR KEY13LAB ",
        "KEY14DEF KEY14ATR KEY14LAB ",
        "KEY15DEF KEY15ATR KEY15LAB ",
        "KEY16DEF KEY16ATR KEY16LAB ",
        "KEY17DEF KEY17ATR KEY17LAB ",
        "KEY18DEF KEY18ATR KEY18LAB ",
        "KEY19DEF KEY19ATR KEY19LAB ",
        "KEY20DEF KEY20ATR KEY20LAB ",
        "KEY21DEF KEY21ATR KEY21LAB ",
        "KEY22DEF KEY22ATR KEY22LAB ",
        "KEY23DEF KEY23ATR KEY23LAB ",
        "KEY24DEF KEY24ATR KEY24LAB ",
        "KEYHELPN"

KEYLISTN = KEYL.name

do i = 1 to words( names )
   x = word( names, i ) "= ''"
   interpret x
end

do i = 1 to 24
   if KEYI.def.i \= "" then
     do
       j = 3 * ( i - 1 ) + 1
       x = word( names, j ) "= '"KEYI.def.i"'"
       interpret x
     end
end

do i = 1 to 24
   if KEYI.atr.i \= "" then
     do
       j = 3 * ( i - 1 ) + 2
       x = word( names, j ) "= '"KEYI.atr.i"'"
       interpret x
     end
end

do i = 1 to 24
   if KEYI.lab.i \= "" then
     do
       j = 3 * ( i - 1 ) + 3
       x = word( names, j ) "= '"KEYI.lab.i"'"
       interpret x
     end
end

KEYHELPN = KEYL.help

"LIBDEF TABLIB PATH ID(&outfile)"
"TBOPEN &tabName LIBRARY(TABLIB)"
if RC = 8 then
  do
    "TBCREATE &tabName KEYS(&key) NAMES(&names) WRITE LIBRARY(TABLIB)"
    if RC \= 0 then
      do
         Call dtlerror "Create for table &tabName failed.  RC="RC
         "LIBDEF TABLIB"
         EXIT
      end
  end
if g.tabrepl = .false then
  do
    "TBGET &tabName"
    if RC = 0 then
      do
        Call dtlwarn "Keylist "keylistn" already exists and option is not to replace.  Ignoring..."
        "TBEND &tabName"
        "LIBDEF TABLIB"
        Call resetGlobals
        RETURN
      end
  end
"TBMOD &tabName"

keylistn = left( keylistn, 8 )
if RC = 8 then
  do
    Call dtlinfo "Adding keylist "keylistn" to table "tabName
  end
else
  do
    Call dtlinfo "Replacing keylist "keylistn" in table "tabName
  end

"TBSORT &tabName FIELDS(KEYLISTN,C,A)"
"TBCLOSE &tabName LIBRARY(TABLIB)"
"LIBDEF TABLIB"

Call dtlinfo "Keylist table "tabName" written to "g.outd

Call resetGlobals
RETURN


KEYI_start: Procedure expose g. KEYL. KEYI. token chars
-- <KEYI key= cmd= fka= >chars
Call checkOpenTags KEYI

parse var token namex attrs
KEYI.name = namex

parse caseless var attrs head "key=" keyx " " tail
keyn = substr( keyx, 2 )
if substr( upper( keyx ), 1, 1 ) \= "F" | pos( keyn, g.valid.key ) = 0 then
  do
    Call dtlerror "Invalid KEY= value found.  Must be F1 - F24."
  end
token = head||tail

parse caseless var token head "cmd=" cmdx " " tail
KEYI.def.keyn = upper( decls( cmdx ) )
token = head||tail

parse caseless var token head "fka=" fkax " " tail
KEYI.atr.keyn = upper( fkax )
if pos( KEYI.atr.keyn, g.valid.atr ) = 0 then
  do
    Call dtlerror "Invalid FKA= value found.  Must be NO, YES, LONG or SHORT."
  end
if KEYI.atr.keyn = "YES" then
  do
    KEYI.atr.keyn = "SHORT"
  end

KEYI.lab.keyn = decls( chars )
if head||tail \= "" then
  do
    Call dtlerror "Invalid data found in the KEYI tag."
  end
RETURN


CMDTBL_start: Procedure expose g. CMDTBL. CMD. CMDACT. token
-- <CMDTBL applid= >
Call checkOpenTags CMDTBL

parse caseless var token head "applid=" applidx " " tail
CMDTBL.applid = upper( applidx )
if CMDTBL.applid = "" then
  do
    Call dtlerror "Missing applid= statement on CMDTBL tag."
  end
else
  do
    Call checkName CMDTBL.applid, "applid", 4
  end

if upper( head||tail ) \= "CMDTBL" then
  do
    Call dtlerror "Invalid data "head||tail" found in the CMDTBL tag."
  end
g.CMDTBL.start = .true
RETURN


CMDTBL_end: Procedure expose g. CMDTBL. CMD. CMDACT. token
-- write out the command table --
Call checkEndTags CMDTBL

outfile = g.outd
cmdName = CMDTBL.applid||"CMDS"

if g.errors then
  do
    Call dtlerror "Command table "cmdName" not written due to errors."
    Call resetGlobals
    RETURN
  end


"LIBDEF CMDLIB PATH ID(&outfile)"
"CONTROL ERRORS RETURN"
"TBOPEN &cmdName LIBRARY(CMDLIB)"
openRC = RC
"CONTROL ERRORS CANCEL"

if openRC = 8 then
  do
    "TBCREATE &cmdName NAMES(ZCTVERB ZCTTRUNC ZCTACT ZCTDESC) WRITE LIBRARY(CMDLIB)"
    if RC \= 0 then
      do
         Call dtlerror "Create for table &cmdName failed.  RC="RC
         "LIBDEF CMDLIB"
         EXIT
      end
  end
else if openRC = 0 then
  do
    if g.tabrepl = .false then
      do
        Call dtlwarn "Command table "cmdName" already exists and option is not to replace.  Ignoring..."
        "TBEND &cmdName"
        "LIBDEF CMDLIB"
        Call resetGlobals
        RETURN
      end
    else
      do
        Call dtlwarn "Replacing command table "cmdName
        "TBTOP &cmdName"
        "TBSKIP &cmdName"
        do while RC = 0
           "TBDELETE &cmdName"
           "TBSKIP &cmdName"
        end
      end
  end
else if openRC = 12 then
  do
    Call dtlwarn "Command table "cmdName" is open.  Cannot replace..."
    "LIBDEF CMDLIB"
    Call resetGlobals
    RETURN
  end
else if openRC > 12 then
  do
    Call dtlwarn "Unexpected error occured opening command table "cmdName".  RC="zerrrc
    Call dtlwarn zerrsm
    Call dtlwarn zerrlm
    "LIBDEF CMDLIB"
    Call resetGlobals
    RETURN
  end

do i = 1 to g.yctverb.0
   zctverb  = g.yctverb.i
   zcttrunc = g.ycttrunc.i
   zctact   = g.yctact.i
   zctdesc  = g.yctdesc.i
   "TBADD &cmdName"
end

"TBCLOSE &cmdName LIBRARY(CMDLIB)"
"LIBDEF CMDLIB"

Call dtlinfo "Command table "cmdName" written to "g.outd

Call resetGlobals
RETURN


CMD_start: Procedure expose g. CMDTBL. CMD. CMDACT. token chars
-- <CMD name= altdescr= >chars
Call checkOpenTags CMD

if words( chars ) > 1 then
  do
    Call dtlerror "Invalid text found on CMD tag."
  end

parse caseless var token head "name=" verbx " " tail
verb = translate( verbx )
if verbx = "" then
  do
    Call dtlerror "Missing name= statement on CMD tag."
  end
else
  do
    Call checkName verbx, "name", 8
  end

token = head||tail
parse caseless var token head "altdescr=" descx

if upper( head ) \= "CMD" then
  do
    Call dtlerror "Invalid data found in the CMD tag ("head")"
  end

verbx = strip( verbx, "B", '"' )
descx = strip( descx, "B", '"' )

i = g.yctverb.0 + 1
p = pos( "<T>", chars )
if p > 0 then p = p - 1

g.yctverb.0  = i
g.yctverb.i  = verbx
g.ycttrunc.i = p
g.yctdesc.i  = descx
RETURN


CMDACT_start: Procedure expose g. CMDTBL. CMD. CMDACT. token
-- <CMDACT action= >
Call checkOpenTags CMDACT

parse caseless var token head "action=" actionx
actionx = decls( translate( strip( strip( actionx ), "B", '"' ) ) )
if actionx = "" then
  do
    Call dtlerror "Missing action= statement on CMDACT tag."
  end
else
  do
    Call checkAction actionx
  end
if upper( head ) \= "CMDACT" then
  do
    Call dtlerror "Invalid data found in the CMDACT tag ("head")."
  end

i = g.yctverb.0
g.yctact.i = actionx
RETURN


decls: procedure expose g.
parse arg text
ret = ""

do while text \= ""
   parse var text head "&" +1 e ";" +1 text
   if e \= "" then
     do
       f = upper( e )
       if g.decl.f \= "" then
         do
           e = g.decl.f
         end
       else
         do
           e = '&' || e || ';'
         end
     end
    ret = ret || head || e
end
RETURN ret


checkOpenTags: Procedure expose g.
type = arg( 1 )

if type \= "!DOCTYPE" & g.!DOCTYPE.start = .false then
  do
    Call dtlerror "DOCTYPE must be the first tag."
  end

select
  when type = "!DOCTYPE" then
    do
      if g.!DOCTYPE.start = .true then
        do
          Call dtlerror "DOCTYPE tag already processed.  Only 1 tag of this type is allowed."
        end
    end
  when type = "KEYL" then
    do
      if g.KEYL.start = .true then
        do
          Call dtlerror "open-KEYL tag found before end-KEYL tag."
        end
    end
  when type = "KEYI" then
    do
      if g.KEYL.start = .false then
        do
          Call dtlerror "KEYI tag found without a KEYL tag."
        end
    end
  when type = "CMDTBL" then
    do
      if g.CMDTBL.start = .true then
        do
          Call dtlerror "open-CMDTBL tag found before end-CMDTBL tag."
        end
    end
  when type = "CMD" then
    do
      if g.CMDTBL.start = .false then
        do
          Call dtlerror "CMD tag found outside a CMDTBL tag."
        end
    end
  when type = "CMDACT" then
    do
      if g.CMDTBL.start = .false then
        do
          Call dtlerror "CMDACT tag found outside a CMDTBL tag."
        end
    end
end
RETURN


checkEndTags: Procedure expose g.
type = arg( 1 )

select
  when type = "KEYL" then
    do
      if g.KEYL.start = .false then
        do
          Call dtlerror "end-KEYL tag found without open-KEYL tag."
        end
    end
  when type = "CMDTBL" then
    do
      if g.CMDTBL.start = .false then
        do
          Call dtlerror "end-CMDTBL tag found without open-CMDTBL tag."
        end
    end
end
RETURN


checkName: Procedure expose g.
name = arg( 1 )
type = arg( 2 )
mxl  = arg( 3 )
if name = "" | length( name ) > mxl then
  do
    Call dtlerror "Invalid "type" format.  Entered value is "name".  Must be 1-"mxl" characters long."
    RETURN
  end

c = substr( name, 1, 1 )
if \datatype( c, "M" ) & c \= "#" & c \= "$" & c \= "@" then
  do
    Call dtlerror "Invalid "type" format.  Entered value is "name".  ",
                  "The first character must be A-Z, a-z, @, #, or $"
    RETURN
  end

do i = 2 to length( name )
  c = substr( name, i, 1 )
  if \datatype( c, "A" ) & c \= "#" & c \= "$" & c \= "@" then
    do
      Call dtlerror "Invalid "type" format.  Entered value is "name".  ",
                    "The first character must be A-Z, a-z, @, #, or $.  ",
                    "Remaining characters, if any, can be A-Z, a-z, @, #, $, or 0-9."
      RETURN
    end
end
RETURN


checkAction: Procedure expose g.
/* Check ZCTACT name is of the correct format */
act = strip( arg( 1 ) )
if act \= "" then
  do
    act1 = substr( act, 1, 1 )
    if act1 = "&" then
      do
        Call checkName substr( act, 2 ), "variable name", 8
      end
    else
      do
        act = word( arg( 1 ), 1 )
        if act \= "ALIAS"     & ,
           act \= "BACKWARD"  & ,
           act \= "CANCEL"    & ,
           act \= "EXHELP"    & ,
           act \= "EXIT"      & ,
           act \= "FKA"       & ,
           act \= "FORWARD"   & ,
           act \= "HELP"      & ,
           act \= "NOP"       & ,
           act \= "PANELID"   & ,
           act \= "PASSTHRU"  & ,
           act \= "RETRIEVE"  & ,
           act \= "SELECT"    & ,
           act \= "SETVERB"   then
          do
            Call dtlerror "Invalid action '"act"'"
          end
      end
  end
RETURN


dtlerror: Procedure expose g.errors g.thisexec
call writemsg g.thisexec, "ERROR:" arg(1)
g.errors = .true
RETURN


dtlinfo: Procedure expose g.
call writemsg g.thisexec, "INFO:" arg(1)
RETURN


dtlwarn: Procedure expose g.
call writemsg g.thisexec, "WARNING:" arg(1)
RETURN


writemsg: Procedure expose g.
msg_prefix = arg( 1 )
msg_text   = arg( 2 )

if msg_text \= "" then
  do
    indent = length( msg_prefix ) + 1
    msg    = msg_prefix msg_text
  end
else
  do
    indent = 0
    msg    = msg_prefix
  end

spaces = copies( " ", indent )

do while length( msg ) > g.screenw
   msg_split = lastpos( " ", msg, g.screenw )
   if msg_split = 0 then
     do
       msg_split = g.screenw
     end
   say left( msg, msg_split-1 )
   msg = spaces || strip( substr( msg, msg_split ) )
end

say msg
RETURN
