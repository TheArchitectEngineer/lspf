/*
  Copyright (c) 2018 Daniel John Erdos

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

*/

/* REXX Keylist utility  */
/* Keylist format:       */
/*    Fields:  KEYLISTN (key), KEYnDEF KEYnLAB KEYnATR (names) n=1 to 24, KEYHELPN */


/* Create the ISR keylist table ISRKEYx            */
/* and default editor keylist ISRSAB.              */
/* x = S for a SHARED table                        */
/*     P for a PRIVATE table                       */
/* SHARED  tables are written to ZTABL             */
/* PRIVATE tables are written to ZUPROF            */

/* This can also be done online via commands       */
/* keylists (both) and keylist (private)           */

/* It can also be done by coding DTL for the       */
/* keylist and converting it using lspdtlc.        */

/* Change tabName to the keylist table name        */
/* Change KEYLISTN to the keylist entry name       */
/* Assign values to relevant fields in 'names'     */

Call Initialise

address ISPEXEC

mypath = ""

do forever
  say "Enter type of keylist required, S for SHARED or P for PRIVATE"
  say "Enter EXIT to leave"
  pull ans
  if ans = "S" then
    do
      tabName = "ISRKEYS"
      shared  = .true
      leave
    end
  else if ans = "P" then
    do
      tabName = "ISRKEYP"
      shared  = .false
      leave
    end
  else if ans = "EXIT" then
    do
      exit
    end
  else if ans = "" then
    do
      iterate
    end
  say ans "is an invalid answer."
end

say "Creating default keylists...."

if shared then dd = "ZTABL"
else           dd = "ZUPROF"

"QBASELIB &dd ID(MYPATH)"
if RC = 4 then
  do
    say dd "is not allocated."
    if shared then
      do
        say "Make sure a path is allocated to ZTABL for SHARED keylists."
      end
    else
      do
        say "Make sure a path is allocated to ZUPROF for PRIVATE keylists."
      end
    exit
  end

"LIBDEF TABLIB PATH ID(&mypath)"

say "Keylist tables will be placed in "dd" ("mypath")"
say

"TBOPEN &tabName LIBRARY(TABLIB)"
if RC = 8 then
  do
    CAll CreateDefault
  end
else if RC > 0 then
  do
     say
     say "Error opening table "tabName".  RC="RC".  Aborting..."
     "LIBDEF TABLIB"
     EXIT
  end
else
  do
     say "Table "tabName" already exists.  Using existing table..."
  end

KEYLISTN = "ISRSAB"

KEY1DEF  = "HELP"
KEY5DEF  = "RFIND"
KEY6DEF  = "RCHANGE"
KEY16DEF = ":TS"

say "Creating keylist entry "KEYLISTN" (in table "tabName")"

"TBSORT &tabName FIELDS(KEYLISTN,C,A)"
if RC > 0 then
  do
     say
     say "Error sorting table "tabName". RC="RC"  Aborting..."
     "TBEND &tabName"
     "LIBDEF TABLIB"
     EXIT
  end

"TBADD &tabName ORDER"
if RC = 8 then
  do
     say
     say "Error adding row "keylistn" to table "tabName".  Row already exists."
     say "Use command 'keylists' from any panel to delete row or delete table."
     "TBEND &tabName"
     "LIBDEF TABLIB"
     EXIT
  end
else if RC > 0 then
  do
     say
     say "Error adding row to table "tabName". RC="RC".  Aborting..."
     "TBEND &tabName"
     "LIBDEF TABLIB"
     EXIT
  end

"TBCLOSE &tabName LIBRARY(TABLIB)"
if RC > 0 then
  do
     say
     say "Error saving table "tabName". RC="RC".  Aborting..."
     "TBEND &tabName"
     "LIBDEF TABLIB"
     EXIT
  end

say
say "*********************************************************"
say "Entry "keylistn" in Table "tabName" created and saved okay"
say "*********************************************************"

"LIBDEF TABLIB"
EXIT


Initialise:
key   = "KEYLISTN"
names = "KEY1DEF  KEY1ATR  KEY1LAB ",
        "KEY2DEF  KEY2ATR  KEY2LAB ",
        "KEY3DEF  KEY3ATR  KEY3LAB ",
        "KEY4DEF  KEY4ATR  KEY4LAB ",
        "KEY5DEF  KEY5ATR  KEY5LAB ",
        "KEY6DEF  KEY6ATR  KEY6LAB ",
        "KEY7DEF  KEY7ATR  KEY7LAB ",
        "KEY8DEF  KEY8ATR  KEY8LAB ",
        "KEY9DEF  KEY9ATR  KEY9LAB ",
        "KEY10DEF KEY10ATR KEY10LAB ",
        "KEY11DEF KEY11ATR KEY11LAB ",
        "KEY12DEF KEY12ATR KEY12LAB ",
        "KEY13DEF KEY13ATR KEY13LAB ",
        "KEY14DEF KEY14ATR KEY14LAB ",
        "KEY15DEF KEY15ATR KEY15LAB ",
        "KEY16DEF KEY16ATR KEY16LAB ",
        "KEY17DEF KEY17ATR KEY17LAB ",
        "KEY18DEF KEY18ATR KEY18LAB ",
        "KEY19DEF KEY19ATR KEY19LAB ",
        "KEY20DEF KEY20ATR KEY20LAB ",
        "KEY21DEF KEY21ATR KEY21LAB ",
        "KEY22DEF KEY22ATR KEY22LAB ",
        "KEY23DEF KEY23ATR KEY23LAB ",
        "KEY24DEF KEY24ATR KEY24LAB ",
        "KEYHELPN"

do i = 1 to words( names )
   x = word( names, i ) "= ''"
   interpret x
end
RETURN


CreateDefault:
say "Creating keylist table "tabName":"

"TBCREATE &tabName KEYS(&key) NAMES(&names) WRITE LIBRARY(TABLIB)"
if RC \= 0 then
  do
     say "Create for table "tabName" failed.  RC="RC
     say
     "LIBDEF TABLIB"
     EXIT
  end

say "Created "tabName" okay"

KEYLISTN = "ISRDEF"

"TBSORT &tabName FIELDS(KEYLISTN,C,A)"
if RC > 0 then
  do
     say
     say "Error sorting table "tabName". RC="RC".  Aborting..."
     "TBEND &tabName"
     "LIBDEF TABLIB"
     EXIT
  end

"TBADD &tabName ORDER"
if RC > 0 then
  do
     say
     say "Error adding row to table "tabName". RC="RC".  Aborting..."
     "TBEND &tabName"
     "LIBDEF TABLIB"
     EXIT
  end
RETURN
