See IBM's ISPF Services Guide and ISPF Reference Summary for a more complete description of ISPF services.
Detailed ISPF programming information can be found in IBM's Dialog Developer's Guide And Reference.

Application programs running under lspf need to be implemented as a class inheriting from pApplication and
implement pure virtual function application().  Control is given to this function after initialisation is complete.

Application modules must reside in ZLDPATH defined in lspf.h

C++ lspf service function prototypes:
-------------------------------------

void   control( const string&, const string&, const string& ="" ) ;
void   control( const string&, void (pApplication::*)() ) ;

void   libdef( const string&, const string& ="", const string& ="", const string& ="UNCOND" ) ;

void   rdisplay( const string&, bool =true ) ;
void   pull( const string& ) ;
void   pull( string* ) ;

void   display( string p_name,
                const string& p_msg = "",
                const string& p_cursor = "",
                int p_curpos = 0,
                const string& p_buffer = "",
                const string& p_retbuf = "" ) ;

void   ftclose( const string&,
                string = "",
                string = "" ) ;

void   ftincl( const string&,
               string = "" ) ;

void   ftopen( string = "" ) ;

void   pquery( const string& p_name,
               const string& a_name,
               const string& t = "",
               const string& w = "",
               const string& d = "",
               const string& r= "",
               const string& c = "" ) ;

bool   notify() ;

void   select( const string& ) ;

void   submit( const string& ) ;

void   qlibdef( const string&, const string& ="" , const string& ="" ) ;

void   vcopy( const string&, string&, vcMODE=MOVE ) ;
void   vcopy( const string&, string* &, vcMODE=LOCATE ) ;

void   vdefine( const string&,
                string*,
                string* =NULL,
                string* =NULL,
                string* =NULL,
                string* =NULL,
                string* =NULL,
                string* =NULL,
                string* =NULL,
                string* =NULL,
                string* =NULL ) ;

void   vdefine( const string&,
                int*,
                int* =NULL,
                int* =NULL,
                int* =NULL,
                int* =NULL,
                int* =NULL,
                int* =NULL,
                int* =NULL,
                int* =NULL,
                int* =NULL ) ;

void   vdelete( const string& ) ;
void   verase( const string& var, poolType =ASIS ) ;
void   vget( const string& var, poolType =ASIS )   ;
void   vput( const string& var, poolType =ASIS )   ;
set<string>& vlist( poolType pType, int lvl ) ;
set<string>& vilist( vdType =ALL ) ;
set<string>& vslist( vdType =ALL ) ;
void   vmask( const string& var, const string& type, const string& mask ) ;
void   vreplace( const string&, const string& ) ;
void   vreplace( const string&, int )           ;
void   vreset() ;

void   log( const string& msg ) ;
void   qtabopen( const string& tb_list ) ;

void   tbadd( const string& tb_name,
              string tb_namelst="",
              const string& tb_order="",
              int tb_num_of_rows=0 ) ;

void   tbbottom( const string& tb_name,
                 const string& tb_savenm="",
                 const string& tb_rowid_vn="",
                 const string& tb_noread="",
                 const string& tb_crp_name="" ) ;

void   tbclose( const string& tb_name, const string& new_name="", string path="" ) ;

void   tbcreate( const string& tb_name,
                 string keys,
                 string names,
                 tbWRITE =NOWRITE,
                 tbREP =NOREPLACE,
                 string path="",
                 tbDISP =NON_SHARE ) ;

void   tbdelete( const string& tb_name ) ;

void   tbdispl( const string& tb_name,
                string p_name="",
                const string& p_msg="",
                string p_cursor="",
                int p_csrrow=0,
                int p_csrpos=1,
                string p_autosel="YES",
                const string& p_crp_name="",
                const string& p_rowid_nm="",
                const string& p_msgloc="" ) ;

void   tbend( const string& tb_name ) ;

void   tberase( const string& tb_name, string tb_path="" ) ;

void   tbexist( const string& tb_name ) ;

void   tbget( const string& tb_name,
              const string& tb_savenm="",
              const string& tb_rowid_vn="",
              const string& tb_noread="",
              const string& tb_crp_name="" ) ;

void   tbmod( const string& tb_name,
              string tb_namelst="",
              const string& tb_order="" ) ;

void   tbopen( const string& tb_name,
               tbWRITE WRITE,
               string path="",
               tbDISP c=NON_SHARE ) ;

void   tbput( const string& tb_name,
              string tb_namelst="",
              const string& tb_order="" ) ;

void   tbquery( const string& tb_name,
                const string& tb_keyn="",
                const string& tb_varn="",
                const string& tb_rownn="",
                const string& tb_keynn="",
                const string& tb_namenn="",
                const string& tb_crpn="",
                const string& tb_sirn="",
                const string& tb_lstn="",
                const string& tb_condn="",
                const string& tb_dirn="" ) ;

void   tbsarg( const string& tb_name,
               const string& tb_namelst="",
               const string& tb_dir="NEXT",
               const string& tb_cond_pairs="" ) ;

void   tbsave( const string& tb_name,
               const string& new_name="",
               string path="" ) ;

void   tbscan( const string& tb_name,
               const string& tb_namelst="",
               const string& tb_savenm="",
               const string& tb_rowid_vn="",
               const string& tb_dir="NEXT",
               const string& tb_read="",
               const string& tb_crp_name="",
               const string& tb_condlst="" ) ;

void   tbskip( const string& tb_name,
               int num=1,
               const string& tb_savenm="",
               const string& tb_rowid_vn="",
               const string& tb_rowid="",
               const string& tb_noread="",
               const string& tb_crp_name="" ) ;

void   tbsort( const string& tb_name,
               string tb_fields ) ;

void   tbtop( const string& tb_name ) ;

void   tbvclear( const string& tb_name ) ;

void   browse( const string& m_file,
               const string& m_panel="" ) ;

void   edit( const string& m_file,
             const string& m_panel="",
             const string& m_macro="",
             const string& m_profile="",
             const string& m_lcmds="",
             const string& m_confirm="",
             const string& m_preserv="",
             const string& m_parm="" ) ;

void   view( const string& m_file,
             const string& m_panel="",
             const string& m_macro="",
             const string& m_profile="",
             const string& m_lcmds="",
             const string& m_confirm="",
             const string& m_chgwarn="",
             const string& m_parm="" ) ;

void   edrec( const string& m_parm ) ;

void   setmsg( const string& msg, msgSET sType=UNCOND  ) ;

void   getmsg( const string&,
               const string&,
               const string& ="",
               const string& ="",
               const string& ="",
               const string& ="",
               const string& ="" ) ;

void   addpop( const string& ="", int =0, int =0 ) ;

void   rempop( const string& ="" ) ;

void   enq( const string&, const string&, enqDISP =EXC, enqSCOPE =GLOBAL ) ;
void   deq( const string&, const string&, enqSCOPE =GLOBAL ) ;
void   qscan( const string&, const string&, enqDISP =EXC, enqSCOPE =GLOBAL ) ;

Alternatively, the ISPEXEC interface is supported (with the usual restrictions), rather than calling the pApplication method.
The ISPEXEC interface supports variable substitution.

Functions set return code in special variable RC

The following services are implemented:

Variable handling:
vdefine including definition stacking.  Only STRING and INT supported.
vdelete
vcopy (MOVE and LOCATE options supported)
vreplace
verase
vget
vput
vreset

vlist (extension to return a list of variables in a pool)


Table handling:
Not well tested. Any number of keys supported.


Additional Services
===================
rdisplay() - Issue line output synchronously.  Control returns to the application after
             each line issued.
say()      - Like rdisplay but does not set the return code.
pull()     - Gets data from the user in line mode.
             Pull can specify a variable name (the data read goes to the function pool),
             or it can specify a string pointer to contain the data.
             ISPEXEC interface only supports the function pool variable.
notify()   - Issue line output asynchronously.  Output is queued until user interaction.
enq()      - Issue an enqueue with a major name and minor name (qname and rname)
deq()      - Release an enqueue
qscan()    - Search for an enqueue.
submit()   - Start an application asynchronously.
             If from a foreground task, new task runs in the background.
             If from a background task, new task runs independently of the submitting task.
             Note:
             select() starts a new task synchronously.  If issued from a background task, old task waits
             for the new task to terminate before resuming.  ZRC, ZRSN and ZRESULT are set and any abend
             is percolated back until/unless within a CONTROL ERRORS RETURN statement.
             Function pool variable ZSBTASK contains the submitted task id.

control( "NOTIFY", "JOBEND" ) - Issue notify when background job ends or abends.
